import React, { useState, useEffect, useRef } from 'react';
import Header from '../components/common/Header';
import Footer from '../components/common/Footer';
// Comment out problematic imports for now
// import { jsPDF } from 'jspdf';
// import 'jspdf-autotable';

const JournalPage = () => {
	const [journalEntries, setJournalEntries] = useState([]);
	const [filteredEntries, setFilteredEntries] = useState([]);
	const [loading, setLoading] = useState(true);
	const [searchTerm, setSearchTerm] = useState('');
	const [dateRange, setDateRange] = useState({ start: '', end: '' });
	const [entryType, setEntryType] = useState('all'); // 'all', 'experience', or 'event'
	const [sortBy, setSortBy] = useState('date-desc');
	const printContentRef = useRef(null);

	// Add state for editing entries
	const [editingEntry, setEditingEntry] = useState(null);
	const [editedContent, setEditedContent] = useState('');
	const [editedTags, setEditedTags] = useState('');

	// Add state for success/error messages
	const [statusMessage, setStatusMessage] = useState({ text: '', type: '' });

	// Fetch journal entries on component mount
	useEffect(() => {
		const fetchJournalEntries = async () => {
			try {
				console.log('Fetching journal entries...');
				const response = await fetch('http://localhost:5000/api/journal');
				console.log('API Response status:', response.status);

				if (!response.ok) {
					throw new Error(`Error: ${response.status}`);
				}

				const data = await response.json();
				console.log('Fetched journal data:', data);

				if (data.success && data.journals) {
					console.log('Setting journal entries:', data.journals);
					setJournalEntries(data.journals);
					setFilteredEntries(data.journals);
				} else {
					console.error('Failed to fetch journal entries:', data);
					setJournalEntries([]);
					setFilteredEntries([]);
				}
			} catch (error) {
				console.error('Error fetching journal entries:', error);
				setJournalEntries([]);
				setFilteredEntries([]);
				showStatusMessage(
					'Unable to load journal entries. Please try again later.',
					'error'
				);
			} finally {
				setLoading(false);
			}
		};

		fetchJournalEntries();
	}, []);

	// Add this useEffect for handling refresh parameter
	useEffect(() => {
		const urlParams = new URLSearchParams(window.location.search);
		const refresh = urlParams.get('refresh');

		if (refresh === 'true') {
			// Force a re-fetch when redirected from chatbot
			const fetchJournalEntries = async () => {
				try {
					const response = await fetch('http://localhost:5000/api/journal');
					if (response.ok) {
						const data = await response.json();
						if (data.success && data.journals) {
							setJournalEntries(data.journals);
							setFilteredEntries(data.journals);
						}
					}
				} catch (error) {
					console.error('Error refreshing journal entries:', error);
				}
			};

			fetchJournalEntries();

			// Clean up the URL to remove the refresh parameter
			if (window.history.replaceState) {
				const newUrl = window.location.pathname;
				window.history.replaceState(null, '', newUrl);
			}
		}
	}, []);

	// Apply filters when search term, date range, entry type, or sort option changes
	useEffect(() => {
		let filtered = [...journalEntries];

		// Filter by search term
		if (searchTerm) {
			const term = searchTerm.toLowerCase();
			filtered = filtered.filter(
				(entry) =>
					entry.content.toLowerCase().includes(term) ||
					entry.tags.some((tag) => tag.toLowerCase().includes(term))
			);
		}

		// Filter by date range
		if (dateRange.start) {
			const startDate = new Date(dateRange.start);
			filtered = filtered.filter(
				(entry) => new Date(entry.timestamp) >= startDate
			);
		}
		if (dateRange.end) {
			const endDate = new Date(dateRange.end);
			endDate.setHours(23, 59, 59); // Include the entire end day
			filtered = filtered.filter(
				(entry) => new Date(entry.timestamp) <= endDate
			);
		}

		// Filter by entry type
		if (entryType !== 'all') {
			filtered = filtered.filter((entry) => entry.type === entryType);
		}

		// Sort entries
		filtered.sort((a, b) => {
			const dateA = new Date(a.timestamp);
			const dateB = new Date(b.timestamp);

			if (sortBy === 'date-asc') {
				return dateA - dateB;
			} else if (sortBy === 'date-desc') {
				return dateB - dateA;
			}
			return 0;
		});

		setFilteredEntries(filtered);
	}, [journalEntries, searchTerm, dateRange, entryType, sortBy]);

	// Format date for display
	const formatDate = (timestamp) => {
		const date = new Date(timestamp);
		return date.toLocaleDateString('en-US', {
			year: 'numeric',
			month: 'long',
			day: 'numeric',
			hour: '2-digit',
			minute: '2-digit',
		});
	};

	// Print functionality (replaces PDF generation)
	const handlePrint = () => {
		window.print();
	};

	// Handle download of journal entries as CSV
	const handleDownloadCSV = () => {
		// Create CSV content
		let csvContent = 'data:text/csv;charset=utf-8,';
		csvContent += 'Date,Type,Content,Tags\n';

		filteredEntries.forEach((entry) => {
			const formattedDate = formatDate(entry.timestamp);
			const type =
				entry.type === 'event' ? `Event (${entry.eventType})` : 'Experience';
			const content = `"${entry.content.replace(/"/g, '""')}"`;
			const tags = entry.tags.join(', ');

			csvContent += `${formattedDate},${type},${content},${tags}\n`;
		});

		// Create download link and trigger click
		const encodedUri = encodeURI(csvContent);
		const link = document.createElement('a');
		link.setAttribute('href', encodedUri);
		link.setAttribute(
			'download',
			`ember-journal-${new Date().toISOString().split('T')[0]}.csv`
		);
		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
	};

	// Function to start editing an entry
	const startEditing = (entry) => {
		setEditingEntry(entry);
		setEditedContent(entry.content);
		setEditedTags(entry.tags.join(', '));
	};

	// Function to cancel editing
	const cancelEditing = () => {
		setEditingEntry(null);
		setEditedContent('');
		setEditedTags('');
	};

	// Function to save edited entry
	const saveEditedEntry = async () => {
		if (!editingEntry) return;

		try {
			const updatedEntry = {
				...editingEntry,
				content: editedContent,
				tags: editedTags
					.split(',')
					.map((tag) => tag.trim())
					.filter((tag) => tag),
			};

			const response = await fetch(
				`http://localhost:5000/api/journal/${
					editingEntry._id || editingEntry.id
				}`,
				{
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(updatedEntry),
				}
			);

			if (response.ok) {
				// Update the entry in the local state
				const updatedEntries = journalEntries.map((entry) =>
					(entry._id || entry.id) === (editingEntry._id || editingEntry.id)
						? updatedEntry
						: entry
				);

				setJournalEntries(updatedEntries);
				setEditingEntry(null);
				setEditedContent('');
				setEditedTags('');
				showStatusMessage('Journal entry updated successfully!', 'success');
			} else {
				console.error('Failed to update entry:', await response.text());
				showStatusMessage('Failed to update entry. Please try again.', 'error');
			}
		} catch (error) {
			console.error('Error updating entry:', error);
			showStatusMessage('Error updating entry. Please try again.', 'error');
		}
	};

	// Function to delete an entry
	const deleteEntry = async (entryId) => {
		if (
			!window.confirm(
				'Are you sure you want to delete this journal entry? This action cannot be undone.'
			)
		) {
			return;
		}

		try {
			const response = await fetch(
				`http://localhost:5000/api/journal/${entryId}`,
				{
					method: 'DELETE',
				}
			);

			if (response.ok) {
				// Remove the entry from the local state
				const updatedEntries = journalEntries.filter(
					(entry) => (entry._id || entry.id) !== entryId
				);

				setJournalEntries(updatedEntries);
				showStatusMessage('Journal entry deleted successfully!', 'success');
			} else {
				console.error('Failed to delete entry:', await response.text());
				showStatusMessage('Failed to delete entry. Please try again.', 'error');
			}
		} catch (error) {
			console.error('Error deleting entry:', error);
			showStatusMessage('Error deleting entry. Please try again.', 'error');
		}
	};

	// Function to show status messages
	const showStatusMessage = (text, type) => {
		setStatusMessage({ text, type });

		// Clear the message after 5 seconds
		setTimeout(() => {
			setStatusMessage({ text: '', type: '' });
		}, 5000);
	};

	// Function to manually add a journal entry
	const addJournalEntry = async (content) => {
		if (!content) return;

		try {
			const newEntry = {
				type: 'experience',
				content: content,
				timestamp: new Date().toISOString(),
				tags: ['manual-entry'],
				userId: 'default_user',
			};

			const response = await fetch('http://localhost:5000/api/journal', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(newEntry),
			});

			if (response.ok) {
				// Refresh the entries
				const journalResponse = await fetch(
					'http://localhost:5000/api/journal'
				);
				if (journalResponse.ok) {
					const data = await journalResponse.json();
					if (data.success && data.journals) {
						setJournalEntries(data.journals);
					}
				}
				showStatusMessage('Journal entry added successfully!', 'success');
			} else {
				console.error('Failed to add entry:', await response.text());
				showStatusMessage('Failed to add entry. Please try again.', 'error');
			}
		} catch (error) {
			console.error('Error adding entry:', error);
			showStatusMessage('Error adding entry. Please try again.', 'error');
		}
	};

	return (
		<div className='journal-page'>
			<Header />
			<div className='journal-content'>
				<div className='ho-width-container'>
					<h1>Your Health Journal</h1>
					<p className='journal-intro'>
						Track and review your experiences and health events. Use the filters
						below to search for specific entries, dates, or types of records.
					</p>

					{/* Status Message Display */}
					{statusMessage.text && (
						<div className={`status-message ${statusMessage.type}`}>
							{statusMessage.text}
						</div>
					)}

					<div className='journal-container'>
						<div className='journal-filters'>
							<div className='search-container'>
								<label htmlFor='search' className='visually-hidden'>
									Search journal entries
								</label>
								<input
									type='text'
									id='search'
									placeholder='Search journal entries...'
									value={searchTerm}
									onChange={(e) => setSearchTerm(e.target.value)}
									className='search-input'
								/>
							</div>

							<div className='filter-row'>
								<div className='date-filter'>
									<label htmlFor='start-date'>From:</label>
									<input
										type='date'
										id='start-date'
										value={dateRange.start}
										onChange={(e) =>
											setDateRange({ ...dateRange, start: e.target.value })
										}
									/>

									<label htmlFor='end-date'>To:</label>
									<input
										type='date'
										id='end-date'
										value={dateRange.end}
										onChange={(e) =>
											setDateRange({ ...dateRange, end: e.target.value })
										}
									/>
								</div>

								<div className='type-sort-row'>
									<div className='type-filter'>
										<label htmlFor='entry-type'>Entry type:</label>
										<select
											id='entry-type'
											value={entryType}
											onChange={(e) => setEntryType(e.target.value)}
										>
											<option value='all'>All entries</option>
											<option value='experience'>Experiences</option>
											<option value='event'>Events</option>
										</select>
									</div>

									<div className='sort-filter'>
										<label htmlFor='sort-by'>Sort by:</label>
										<select
											id='sort-by'
											value={sortBy}
											onChange={(e) => setSortBy(e.target.value)}
										>
											<option value='date-desc'>Newest first</option>
											<option value='date-asc'>Oldest first</option>
										</select>
									</div>
								</div>
							</div>

							<div className='download-buttons'>
								<button
									className='download-button'
									onClick={handlePrint}
									aria-label='Print journal entries'
								>
									Print Journal
								</button>
								<button
									className='download-button secondary'
									onClick={handleDownloadCSV}
									aria-label='Download filtered journal entries as CSV'
								>
									Download as CSV
								</button>
								<button
									className='add-entry-button'
									onClick={() => {
										const content = prompt('Enter your journal entry:');
										if (content) {
											addJournalEntry(content);
										}
									}}
								>
									Add New Entry
								</button>
							</div>
						</div>

						<div className='journal-entries' ref={printContentRef}>
							{loading ? (
								<p className='loading-message'>
									Loading your journal entries...
								</p>
							) : filteredEntries.length > 0 ? (
								filteredEntries.map((entry) => (
									<div
										key={entry._id || entry.id} // Use _id (MongoDB's default) or fall back to id
										className={`journal-entry ${
											entry.type === 'event'
												? 'event-entry'
												: 'experience-entry'
										}`}
									>
										<div className='entry-header'>
											<span className='entry-type'>
												{entry.type === 'event'
													? `Event (${
															entry.eventType
																? entry.eventType.replace('_', ' ')
																: 'Other'
													  })`
													: 'Experience'}
											</span>
											<span className='entry-date'>
												{formatDate(entry.timestamp)}
											</span>
											<div className='entry-actions'>
												<button
													className='edit-button'
													onClick={() => startEditing(entry)}
													aria-label='Edit entry'
												>
													Edit
												</button>
												<button
													className='delete-button'
													onClick={() => deleteEntry(entry._id || entry.id)}
													aria-label='Delete entry'
												>
													Delete
												</button>
											</div>
										</div>

										{editingEntry &&
										(editingEntry._id || editingEntry.id) ===
											(entry._id || entry.id) ? (
											<div className='entry-edit-form'>
												<textarea
													value={editedContent}
													onChange={(e) => setEditedContent(e.target.value)}
													rows={5}
													className='edit-content-textarea'
												/>
												<div className='edit-tags-container'>
													<label htmlFor='edit-tags'>
														Tags (comma-separated):
													</label>
													<input
														type='text'
														id='edit-tags'
														value={editedTags}
														onChange={(e) => setEditedTags(e.target.value)}
														className='edit-tags-input'
													/>
												</div>
												<div className='edit-actions'>
													<button
														onClick={saveEditedEntry}
														className='save-button'
													>
														Save
													</button>
													<button
														onClick={cancelEditing}
														className='cancel-button'
													>
														Cancel
													</button>
												</div>
											</div>
										) : (
											<>
												<div className='entry-content'>
													<p>{entry.content}</p>
												</div>
												<div className='entry-tags'>
													{entry.tags && Array.isArray(entry.tags)
														? entry.tags.map((tag, index) => (
																<span
																	key={`${entry._id || entry.id}-tag-${index}`}
																	className='tag'
																>
																	{tag}
																</span>
														  ))
														: null}
												</div>
											</>
										)}
									</div>
								))
							) : (
								<p className='no-entries-message'>
									No journal entries found matching your filters.
								</p>
							)}
						</div>
					</div>

					<div className='navigation-links'>
						<a href='track.html' className='nav-link'>
							Track New Experiences
						</a>
						<a href='visualize.html' className='nav-link'>
							View Visualizations
						</a>
						<a href='index.html' className='nav-link'>
							Home
						</a>
					</div>
				</div>
			</div>
			<Footer />
		</div>
	);
};

export default JournalPage;
